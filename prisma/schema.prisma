  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
  }

  model Participant {
    id                 Int      @id @default(autoincrement())
    name               String
    group              String
    participationDate  DateTime
    programPart        String
    observations       String?
    status             String   @default("Pendente")
    isActive           Boolean  @default(true)
    isWhatsApp         Boolean  @default(false)
    phone              String?
    imageRightsGranted Boolean  @default(false)
    isMember           Boolean  @default(false)
    microphoneCount    Int      @default(1)
    performanceType    String   @default("Solo")
    bibleVersion       String?
    userPhoto          String?
    files              File[]
  }

  model ProgramPart {
    id       Int     @id @default(autoincrement())
    name     String  @unique
    isActive Boolean @default(true)
  }

  model File {
    id            Int         @id @default(autoincrement())
    filename      String
    driveLink     String
    participantId Int
    participant   Participant @relation(fields: [participantId], references: [id])
  }

  model User {
    id            Int       @id @default(autoincrement())
    name          String?
    email         String?   @unique
    image         String?
    role          String    @default("default") // "admin", "manager", ou "default"
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    emailVerified DateTime?
    accounts      Account[]
    sessions      Session[]
    bookings      Booking[]
  }

  model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
  }

  model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  }

  model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
  }

  model Room {
    id       Int       @id @default(autoincrement())
    name     String
    capacity Int
    bookings Booking[]
  }

  model Department {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    bookings Booking[]
  }

  model Booking {
    id           Int        @id @default(autoincrement())
    roomId       Int
    room         Room       @relation(fields: [roomId], references: [id])
    userId       Int // Certifique-se de que o userId é do tipo Int
    user         User       @relation(fields: [userId], references: [id]) // Define a relação com o User
    departmentId Int
    department   Department @relation(fields: [departmentId], references: [id])
    startTime    DateTime
    endTime      DateTime
    observation  String? // Observações
    phone        String? // Telefone para contato
    isActive     Boolean    @default(true) // Status ativo ou desativado
    status       String     @default("pending") // pending, confirmed, cancelled
  }
