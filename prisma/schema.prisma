// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Participant {
  id                Int        @id @default(autoincrement())
  name              String
  group             String
  participationDate DateTime
  programPart       String
  observations      String?
  status            String     @default("Pendente")
  files             File[]
  isActive          Boolean    @default(true) // Campo para exclusão lógica
  phone             String?    // Novo campo para o telefone
  isWhatsApp        Boolean    @default(false) // Novo campo para indicar se o telefone é WhatsApp
}

model ProgramPart {
  id    Int    @id @default(autoincrement())
  name  String @unique
  isActive Boolean @default(true) // Para permitir ativar/desativar opções
}

model File {
  id          Int      @id @default(autoincrement())
  filename    String
  driveLink   String
  participant Participant @relation(fields: [participantId], references: [id])
  participantId Int
}


model User {
  id             Int       @id @default(autoincrement())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  isAdmin     Boolean  @default(false)
  accounts       Account[]
  sessions       Session[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime

  @@unique([identifier, token])
}
